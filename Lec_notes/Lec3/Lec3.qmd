---
title: "Day 3: Data visualization with ggplot2 package"
subtitle: "Department of Applied Economics, University of Minnesota"
author: "Shunkei Kakimoto"
format: 
  revealjs:
    self-contained: false
    slide-number: c/t
    width: 1600
    height: 900
    theme: 
      - default 
      - ../slide_style/styles.scss
    fontsize: 1.5em
    callout-icon: false
    scrollable: true
    echo: true
    cache: true
    multiplex: true
    code-link: true
    title-slide-attributes:
      data-background-color: "#447099"
    fig-dpi: 400
    chalkboard: true
webr:
  packages: ["data.table", "ggplot2", "dplyr", "rio", "nycflights13", "gapminder"]
  cell-options:
    editor-font-scale: 0.8
filters:
  - webr
---


## {.center}

### Learning Objectives

+ Learn the basic operations of `ggplot2` package to create figures. 
+ You will be able to create:
  + scatter plot
  + line plot
  + bar plot
  + histogram
  + box plot
  + density plot
  + facet plot


<br>

:::{.fragment .center}
### Reference {.center}
+ [ggplot2: Elegant Graphics for Data Analysis (3e)](https://ggplot2-book.org/)
+ [R for Data Science (2e), Ch1: Data visualization](https://r4ds.had.co.nz/pipes.html)
:::


## Today's outline: {.center}

+ 1. Introduction to ggplot2


## Example ggplot figures 

By the end of the lecture, you will be able to create the figures like the following examples using `ggplot2` package.

::: {.panel-tabset}

### Example 1

```{r}
#| label: demo1
#| autorun: true
#| echo: false

# /*===== Load package =====*/
library(ggplot2)
library(dplyr)
library(data.table)

#/*--------------------------------*/
#' ## Scatter plot
#/*--------------------------------*/
ggplot(data = airquality, aes(x = Ozone, y = Temp)) +
  geom_point() +
  labs(title = "Ozone (ppb) and temperature (degrees F) in New York, May to September 1973.") +
  geom_smooth(method = "lm") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))
```


### Example 2

```{r}
#| label: demo2
#| autorun: true
#| echo: false

#/*--------------------------------*/
#' ## Box plot
#/*--------------------------------*/
PlantGrowth %>%
  as.data.table() %>%
  .[, group := fcase(
    group == "ctrl", "Control",
    group == "trt1", "Treatment 1",
    group == "trt2", "Treatment 2"
  )] %>%
  ggplot(data = ., aes(x = group, y = weight)) +
  geom_boxplot(fill = "blue", alpha =0.5) +
  labs(
    title = "Box plot of weight of plants by group",
    x = "Group",
    y = "Weight"
  ) +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))


# ggplot(data = airquality, aes(x = factor(Month), y = Temp)) +
#   geom_boxplot() +
#   theme_bw() +
#   labs(
#     title = "Box plot of temperature (degrees F) in New York, May to September 1973",
#     x = "Month",
#     y = "Temperature"
#   ) +
#   theme(plot.title = element_text(hjust = 0.5))
```

### Example 3

```{r}
#| label: demo3
#| autorun: true
#| echo: false

#/*--------------------------------*/
#' ## Density plot
#/*--------------------------------*/
data(gapminder, package="gapminder")

ggplot(data=gapminder, aes(x=lifeExp, fill=continent)) +
    geom_density(alpha=0.5) +
    labs(
      title = "Density plot of life expectancy by continent",
      x = "Life expectancy",
      y = "Density"
    ) +
    theme_bw() +
    theme(plot.title = element_text(hjust = 0.5))
```

### Example 4

```{r}
#| label: demo4
#| autorun: true
#| echo: false

gapminder %>%
  filter(country %in% c("United States", "China", "India", "United Kingdom")) %>%
  ggplot(aes(x = year, y = lifeExp, color = country))+
  geom_line()+
  labs(
    title = "Life Expectancy in Selected Countries",
    x = "Year", y = "Life Expectancy"
  )+
  theme_bw()+
  theme(plot.title = element_text(hjust = 0.5))
```

### Example 5
```{r}
#| label: demo5
#| autorun: true
#| echo: false

airquality %>%
  as.data.table() %>%
  melt(
    data = .,
    id.vars = c("Month", "Day", "Ozone")
  ) %>%
  ggplot(., aes(x = value, y = Ozone))+
  geom_point()+
  facet_wrap(~variable, scales = "free", ncol = 2)+
  geom_smooth() + 
  labs(
    title = "Relationship between ozone and weather conditions in New York, May to September 1973",
    x = "", y = "Ozone"
  ) +
  theme(plot.title = element_text(hjust = 0.5))
```

:::


## Before starting {.center}

Install the package `ggplot2`if you haven't done so.
```{r}
#| eval: false
install.packages('ggplot2')
```

Once you have the package in your R, let's load it.

```{webr-r}
library(ggplot2)
```

<br>

::: {.callout-note}
+ There is a package called `tidyverse`, which is  a collection of R packages designed for data science.
+ When you load the `tidyverse` package, `ggplot2` package is automatically loaded.
:::


## Introduction to ggplot2 


:::{.panel-tabset}
<!-- start .panel-tabset -->

### What is ggplot2?

+ As you know, there are already base (built-in) R functions to create figures (e.g., `plot()` and `hist()`)
  + pros: they are fast (especially for plotting a large dataset).
  + cons: The plots are difficult to customize.

<br>

+ `ggplot2` package provides more flexibility and customization options for creating figures with a consistet syntax.
  + `ggplot2` views a figure as the collection of multiple independent layers.
    + layers for geometric objects (e.g, points, lines, bars), layers for aesthtic attirbutes of the geometric objects (colour, shape, size), layers of annotations and statistical summaries, ... etc.
  + Then, it combines these layers to create a figure as a final output.

<br>

::: {.callout-tip}
+ When you want a quick look of the plot of x and y, the base R functions are sufficient (e.g., `with(data, plot(column_x, column_y)`). I do this ofen. 
:::


### Anatomy of ggplot {.scrollable}
<!-- You can alternatively use "Code Animations"(https://quarto.org/docs/presentations/revealjs/advanced.html#code-animations) -->
[Hit your right-arrow key (or down arrow key) to see the code (left column) and the corresponding output (right column). Pay attention to the changes in the plot as a new line is added.]{style="color: blue;"}

::: {.r-stack}
<!-- start r-stack -->
::: {.fragment}
```{r}
#| autorun: true
#| warning: false
#| output-location: column
#| fig-width: 6
#| fig-height: 4
#| code-line-numbers: "2"

# Create a canvas for the plot
ggplot(data = airquality) 
```
:::

::: {.fragment}
```{r}
#| autorun: true
#| warning: false
#| output-location: column
#| fig-width: 6
#| fig-height: 4
#| code-line-numbers: "4"
#| 
# Create a canvas for the plot
ggplot(data = airquality) + 
  # Add x-axis
  aes(x = Wind)
```
:::

::: {.fragment}
```{r}
#| autorun: true
#| warning: false
#| output-location: column
#| fig-width: 6
#| fig-height: 4
#| code-line-numbers: "6"

# Create a canvas for the plot
ggplot(data = airquality) + 
  # Add x-axis
  aes(x = Wind) +
  # Add y-axis 
  aes(y = Ozone) 
```
:::

::: {.fragment}
```{r}
#| autorun: true
#| warning: false
#| output-location: column
#| fig-width: 6
#| fig-height: 4
#| code-line-numbers: "8"

# Create a canvas for the plot
ggplot(data = airquality) + 
  # Add x-axis
  aes(x = Wind) + 
  # Add y-axis
  aes(y = Ozone) +
  # Add a scatter plot
  geom_point() 
```
:::

::: {.fragment}
```{r}
#| autorun: true
#| warning: false
#| output-location: column
#| fig-width: 6
#| fig-height: 4
#| code-line-numbers: "10"
# Create a canvas for the plot
ggplot(data = airquality) + 
  # Add x-axis
  aes(x = Wind) +
  # Add y-axis
  aes(y = Ozone) + 
  # Add a scatter plot
  geom_point() +
  # Add a regression line
  geom_smooth(method = "lm") 
```
:::

::: {.fragment}
```{r}
#| autorun: true
#| warning: false
#| output-location: column
#| fig-width: 6
#| fig-height: 4
#| code-line-numbers: "12"

# Create a canvas for the plot
ggplot(data = airquality) + 
  # Add x-axis
  aes(x = Wind) +
  # Add y-axis
  aes(y = Ozone) + 
  # Add a scatter plot
  geom_point() +
  # Add a regression line
  geom_smooth(method = "lm") +
  # Change x-axis label
  labs(x = "Wind Speed (mph)")
```
:::

::: {.fragment}
```{r}
#| autorun: true
#| warning: false
#| output-location: column
#| fig-width: 6
#| fig-height: 4
#| code-line-numbers: "14"

# Create a canvas for the plot
ggplot(data = airquality) + 
  # Add x-axis
  aes(x = Wind) +
  # Add y-axis
  aes(y = Ozone) + 
  # Add a scatter plot
  geom_point() +
  # Add a regression line
  geom_smooth(method = "lm") +
  # Change x-axis label
  labs(x = "Wind Speed (mph)") +
  # Change y-axis label
  labs(y = "Ozone (ppb)") 
```
:::

::: {.fragment}
```{r}
#| autorun: true
#| warning: false
#| output-location: column
#| fig-width: 6
#| fig-height: 4
#| code-line-numbers: "16,17,18,19"

# Create a canvas for the plot
ggplot(data = airquality) + 
  # Add x-axis
  aes(x = Wind) +
  # Add y-axis
  aes(y = Ozone) + 
  # Add a scatter plot
  geom_point() +
  # Add a regression line
  geom_smooth(method = "lm") +
  # Change x-axis label
  labs(x = "Wind Speed (mph)") +
  # Change y-axis label
  labs(y = "Ozone (ppb)") +
  # Add title and subtitle
  labs(
    title = "Relationship between ozone and wind speed in New York",
    subtitle = "May to September 1973"
  )
```
:::

::: {.fragment}
```{r}
#| autorun: true
#| warning: false
#| output-location: column
#| fig-width: 6
#| fig-height: 4
#| code-line-numbers: "21"

# Create a canvas for the plot
ggplot(data = airquality) + 
  # Add x-axis
  aes(x = Wind) +
  # Add y-axis
  aes(y = Ozone) + 
  # Add a scatter plot
  geom_point() +
  # Add a regression line
  geom_smooth(method = "lm") +
  # Change x-axis label
  labs(x = "Wind Speed (mph)") +
  # Change y-axis label
  labs(y = "Ozone (ppb)") +
  # Add title and subtitle
  labs(
    title = "Relationship between ozone and wind speed in New York",
    subtitle = "May to September 1973"
  ) +
  # Add caption
  labs(caption = "Data source:")
```
:::

::: {.fragment}
```{r}
#| autorun: true
#| warning: false
#| output-location: column
#| fig-width: 6
#| fig-height: 4
#| code-line-numbers: "23"

# Create a canvas for the plot
ggplot(data = airquality) + 
  # Add x-axis
  aes(x = Wind) +
  # Add y-axis
  aes(y = Ozone) + 
  # Add a scatter plot
  geom_point() +
  # Add a regression line
  geom_smooth(method = "lm") +
  # Change x-axis label
  labs(x = "Wind Speed (mph)") +
  # Change y-axis label
  labs(y = "Ozone (ppb)") +
  # Add title and subtitle
  labs(
    title = "Relationship between ozone and wind speed in New York",
    subtitle = "May to September 1973"
  ) +
  # Add caption
  labs(caption = "Data source:") +
  # Set the theme
  theme_bw() 
```
:::

::: {.fragment}
```{r}
#| autorun: true
#| warning: false
#| output-location: column
#| fig-width: 6
#| fig-height: 4
#| code-line-numbers: "25,26,27,28"

# Create a canvas for the plot
ggplot(data = airquality) + 
  # Add x-axis
  aes(x = Wind) +
  # Add y-axis
  aes(y = Ozone) + 
  # Add a scatter plot
  geom_point() +
  # Add a regression line
  geom_smooth(method = "lm") +
  # Change x-axis label
  labs(x = "Wind Speed (mph)") +
  # Change y-axis label
  labs(y = "Ozone (ppb)") +
  # Add title and subtitle
  labs(
    title = "Relationship between ozone and wind speed in New York",
    subtitle = "May to September 1973"
  ) +
  # Add caption
  labs(caption = "Data source:") +
  # Set the theme
  theme_bw() +
  # Set the title and subtitle position
  theme(
    plot.title = element_text(hjust = 0.5),
    plot.subtitle = element_text(hjust = 0.5)
  )
```
:::

<!-- end r-stack -->
:::

+ Note: This code is for demonstration purposes. Don't immitate this!

<!-- end .panel-tabset -->
:::


## Basics

::: {.panel-tabset}
<!-- start .panel-tabset 1-->

### Key components

::: {.callout-important}
Every ggplot2 plot has three key components:

+ data
+ A set of aesthetic mappings between variables in the data and visual properties, and
+ At least one layer which describes how to render each observation. Layers are usually created with a geom function.
:::

<br>

The very basic syntax for creating a plot with `ggplot2` is as follows:

```{r}
#| eval: false
ggplot(data = ...) +
  geom_*(aes( ... ))
```

+ `aes` stands for aesthetic mappings. It tells `ggplot2` how to map variables in the data to visual properties of the plot (e.g., x-axis, y-axis, color, shape, size, etc.)
+ `+` operator tells R that you're adding another layer (e.g, line plot) to the current "canvas".
+ Depending on the type of the figure you want to plot, use different `geom_*()` functions.
  + Eg. `geom_point()` for scatter plot, `geom_line()` for line plot, etc.


<!-- ::: aside
Refferece: [ggplot2: Elegant Graphics for Data Analysis (3e)](https://ggplot2-book.org/)
::: -->


### Example

::: {.panel-tabset}
<!-- start .panel-tabset 2 -->


### Data

Let's use the `airquality` data for this example.

+ `airquality` data is a built-in dataset in R. So, you don't need to load it. 
+ Type `airquality` in the console to see the data. (Type`?airquality` in the console for more information.)

```{webr-r}
?airquality

# Take a look at the first few rows of the data
head(airquality)
```


### Let's create a scatter plot

We will create a scatter plot of `Ozone` (ozone level in the air) and `Temp` (Maximum daily temperature in degrees $F$) in the `airquality` data. 

The final plot should look like the following:

```{r}
#| autorun: true
#| echo: false
#| fig-dpi: 100
#| fig-width: 7
#| fig-height: 6
#| fig-align: center

ggplot(airquality)+
  geom_point(aes(x = Temp, y = Ozone))
```

### Step 1

[**Step 1: Start with `ggplot()`**]{style="color: blue;"}

+ `ggplot(data = dataset)` initializes a ggplot object. In other words, [it prepares a "canvas" for the plot]{style="color: blue;"}.
+ Here, let R know the dataset you are trying to visualize.

::: {.panel-tabset}
### Try it!
Run the following code. Can you see any output?
```{webr-r}
ggplot(data = airquality)
```

### Why?

+ [This code does not produce any output because we haven't told R what to plot with the data yet.]{style="color: blue;"} 
+ [`ggplot()` just prepares a blank "canvas" for you!]{style="color: blue;"}

```{webr-r}
ggplot(data = airquality)
```
:::


### Step 2

[**Step 2: Draw figures with `geom_*()` functions, and add to the current canvas use `+` operator**]{style="color: blue;"}

+ For example, we use `geom_point()` to create a scatter plot. 
  + [use `aes()` to specify which variable you want to use for x and y axis]{styl="colur:red"}.
+ Then, add the plot to the current canvas with `+` operator.

<br>

```{webr-r}
#| warning: false

# You might see a warning message. Don't worry about it!
ggplot(data = airquality) +
  geom_point(aes(x = Temp, y = Ozone))
```
<!-- end .panel-tabset 2 -->
:::


### Summary

[These are basic steps to create a figure with `ggplot2` package.]{style="color: blue;"}

+ Step1: Start with `ggplot()`
  + this function prepares a "canvas" for the figure.
+ Step2: Draw figures with `geom_*()` functions, and add to the current canvas using `+` operator. 
+ Step3: Repeat step2 and step3 to add whatever layers you want to add.
+ Step4 (optional): Add labels, titles, and other annotations to the plot with `labs()`, `theme()`, etc.

<br>

::: {.callout-note}
+ In step 3, layers can be added in any order, but the order of the layers affects the final appearance of the plot.
:::


### Your turn

1. Create a scatter plot of `Temp` and `Wind` in the `airquality` data.

2. In the plot you just created, let's change the x-axis label to "Maximum temperature (degrees F)" and the y-axis label to "Wind Speed (mph)". For this, use `labs()` function.

Hint: 

+ `labs(x = new_x_label, y = new_y_label)`
+ use `+` to add this layer to the plot.


```{webr-r}
# Your code here

```
<!-- end .panel-tabset 1 -->
:::


## Different types of plots

::: {.panel-tabset}

### Figure types

[`ggplot2` package provides a variety of functions to create different types of figures.]{style="color: blue;"}

+ `geom_point()`: scatter plot
+ `geom_line()`: line plot
+ `geom_bar()`: bar plot
+ `geom_histogram()`: histogram
+ `geom_boxplot()`: box plot
+ `geom_density()`: density plot
  + This Computes and draws kernel density estimate, which is a smoothed version of the histogram.



### Your turn






## 

## Exercise Problmes

:::{.panel-tabset}

### Exercise 1

:::{.panel-tabset}

### Problem

For this exercise problem, you will use "corn_yield_dt.rds" in the "Data" folder. This data contains the county-level corn yield data (in BU / ACRE) for each major corn production state in the US Midwest from 2000 to 2001. 

<br>
1. Load the data, and take a look at the data. 
2. Convert the data to a `data.table` object. The `value` column contains the corn yield data. Let's rename the column to `yield`. 
3. 

### Solution

```{webr-r}
# === Part 1 === #
yield_dt <- readRDS("Data/corn_yield_dt.rds")

# === Part 2 === #
yield_dt <- 
  as.data.table(yield_dt) %>% 
  setnames("value", "yield")

# === Part 3 === #
```
:::

:::


# Appendix

## Useful packages related to ggplot2

+ patchwork
+ 