---
title: "Day 3: Data visualization with ggplot2 package"
subtitle: "Department of Applied Economics, University of Minnesota"
author: "Shunkei Kakimoto"
format: 
  revealjs:
    self-contained: false
    slide-number: c/t
    width: 1600
    height: 900
    theme: 
      - default 
      - ../slide_style/styles.scss
    fontsize: 1.5em
    callout-icon: false
    scrollable: true
    echo: true
    multiplex: true
    code-link: true
    title-slide-attributes:
      data-background-color: "#447099"
    fig-dpi: 400
webr:
  packages: ["data.table", "ggplot2", "dplyr", "rio", "nycflights13", "openintro"]
  cell-options:
    editor-font-scale: 0.8
filters:
  - webr
---


## {.center}

### Learning Objectives

+ Learn the basic operations of `ggplot2` package to create figures. 
+ You will be able to create:
  + scatter plot
  + line plot
  + bar plot
  + histogram
  + box plot
  + density plot
  + facet plot


<br>

:::{.fragment .center}
### Reference {.center}
+ [ggplot2: Elegant Graphics for Data Analysis (3e)](https://ggplot2-book.org/)
+ [R for Data Science (2e), Ch1: Data visualization](https://r4ds.had.co.nz/pipes.html)
:::


## Today's outline: {.center}

+ 1. Introduction to ggplot2


## Example ggplot figures 

By the end of the lecture, you will be able to create the following figures with `ggplot2` package.

::: {.panel-tabset}

### Example 1

```{r}
#| label: demo1
#| autorun: true
#| echo: false


library(ggplot2)
library(dplyr)
library(data.table)


ggplot(data = airquality, aes(x = Ozone, y = Temp)) +
  geom_point() +
  labs(title = "Ozone (ppb) and temperature (degrees F) in New York, May to September 1973.") +
  geom_smooth(method = "lm") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))
```


### Example 2

```{r}
#| label: demo2
#| autorun: true
#| echo: false

#/*--------------------------------*/
#' ## Box plot
#/*--------------------------------*/
PlantGrowth %>%
  as.data.table() %>%
  .[, group := fcase(
    group == "ctrl", "Control",
    group == "trt1", "Treatment 1",
    group == "trt2", "Treatment 2"
  )] %>%
  ggplot(data = ., aes(x = group, y = weight)) +
  geom_boxplot(fill = "blue", alpha =0.5) +
  labs(
    title = "Box plot of weight of plants by group",
    x = "Group",
    y = "Weight"
  ) +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))


# ggplot(data = airquality, aes(x = factor(Month), y = Temp)) +
#   geom_boxplot() +
#   theme_bw() +
#   labs(
#     title = "Box plot of temperature (degrees F) in New York, May to September 1973",
#     x = "Month",
#     y = "Temperature"
#   ) +
#   theme(plot.title = element_text(hjust = 0.5))
```

### Example 3
```{r}
#| autorun: true
#| echo: false

airquality %>%
  as.data.table() %>%
  melt(
    data = .,
    id.vars = c("Month", "Day", "Ozone")
  ) %>%
  ggplot(., aes(x = value, y = Ozone))+
  geom_point()+
  facet_wrap(~variable, scales = "free", ncol = 2)+
  geom_smooth() + 
  labs(
    title = "Relationship between ozone and weather conditions in New York, May to September 1973",
    x = "", y = "Ozone"
  ) +
  theme(plot.title = element_text(hjust = 0.5))
```

:::


## Before starting {.center}

Install the package `ggplot2`if you haven't done so.
```{r}
#| eval: false
install.packages('ggplot2')
```

Once you have the package in your R, let's load it.

```{webr-r}
library(ggplot2)
```

<br>

::: {.callout-note}
+ There is a package called `tidyverse`, which is  a collection of R packages designed for data science.
+ When you load the `tidyverse` package, `ggplot2` package is automatically loaded.
:::


## Introduction to ggplot2 


:::{.panel-tabset}

### What is ggplot2?


+ As you know, there are already base (built-in) R functions to create figures (e.g., `plot()` and `hist()`)
  + pros: they are fast (for plotting large datasets).
  + cons: The plots are difficult to customize.

<br>

+ `ggplot2` package provides more flexibility and customization options for creating figures.
  + It views a single figure as a collection of multiple independent layers:

<!-- Here use Auto Animate -->
<!-- https://quarto.org/docs/presentations/revealjs/advanced.html#auto-animate -->

[Let's see what this exactly mean by looking at the following example.]{style="color: #447099;"}

<br>

::: {.callout-tip}
+ When you look at the simple plot of x and y, the base R functions are sufficient (e.g., `with(data, plot(x, y)`). I do this ofen. 
:::



### Let's see how ggplot2 creates a figure {.scrollable}

Let's run the following code line by line. Pay attention to the changes in the plot as you run each line.

+ Note: There are some redundant lines in the code below for demonstration purposes. Don't immitate this!

<!-- check this out: https://rstudio-conf-2022.github.io/get-started-quarto/materials/05-presentations.html#/output-location-column -->

```{webr-r}
#| label: taste
#| autorun: false
#| output-location: column

ggplot(data = airquality) + # Create a canvas for the plot
  aes(x = Wind) + # Add x-axis
  aes(y = Ozone) + # Add y-axis
  # Add a scatter plot
  geom_point() + 
  # Add a regression line
  geom_smooth(method = "lm") + 
  # Add x label
  xlab("Wind Speed (mph)") + 
  # Add y label
  ylab("Ozone (ppb)") + 
  # Add title
  labs(title = "Ozone (ppb) and wind speed (mph) in New York, May to September 1973") + 
  # Add caption
  labs(caption = "The data were obtained from the New York State Department of Conservation (ozone data) and the National Weather Service (meteorological data).") + 
  # Set the theme
  theme_bw() + 
  # Set the title position
  theme(plot.title = element_text(hjust = 0.5))
```
:::



## Basics

::: {.panel-tabset}
### Core principles


+ Basic steps
  + step1: Always start with `ggplot()`
    + this function prepares a "canvas" for the figure.
  + step2: use `+` operator to tell R to add another layer (e.g, line plot) to the current canvas.
  + step3: draw figures with `geom_*()` functions.
    + depending on the type of the figure, you use different `geom_*()` functions.
      + Eg. `geom_point()` for scatter plot, `geom_line()` for line plot, etc.
  + step4: repeat step2 and step3 to add whatever layers you want to add.
  + Step5 (optional): add labels, titles, and other annotations to the plot with `labs()`, `theme()`, etc.

<br>

::: {.callout-note}
+ layers can be added in any order, but the order of the layers affects the final appearance of the plot.
+ 
:::

### Step by step




:::



::: {.callout-note}
## Basic

+ 

+ step 1: Always Start with a code `ggplot(data = <DATA>)`
+ step 2: Add layers to the plot with `+` operator. The 

<br>

```{werb-r}
# Example 

```

:::



### General Rule
+ 


### 

:::




## Exercise Problmes

:::{.panel-tabset}

### Exercise 1

:::{.panel-tabset}

### Problem

For this exercise problem, you will use "corn_yield_dt.rds" in the "Data" folder. This data contains the county-level corn yield data (in BU / ACRE) for each major corn production state in the US Midwest from 2000 to 2001. 

<br>
1. Load the data, and take a look at the data. 
2. Convert the data to a `data.table` object. The `value` column contains the corn yield data. Let's rename the column to `yield`. 
3. 

### Solution

```{webr-r}
# === Part 1 === #
yield_dt <- readRDS("Data/corn_yield_dt.rds")

# === Part 2 === #
yield_dt <- 
  as.data.table(yield_dt) %>% 
  setnames("value", "yield")

# === Part 3 === #
```
:::

:::


# Appendix

## Useful packages related to ggplot2

+ patchwork
+ 